{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL, FACEBOOK_AUTH_SUCCESS, FACEBOOK_AUTH_FAIL, LOGOUT, CONTACT_SUCCESS, CONTACT_FAIL } from './types';\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get('/auth/users/me/', config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const googleAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    const details = {\n      'state': state,\n      'code': code\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n    try {\n      const res = await axios.post(`/auth/o/facebook/?${formBody}`, config);\n      dispatch({\n        type: FACEBOOK_AUTH_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n    } catch (err) {\n      dispatch({\n        type: FACEBOOK_AUTH_FAIL\n      });\n    }\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem('access')\n    });\n\n    try {\n      const res = await axios.post('/auth/jwt/verify/', body, config);\n\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/auth/jwt/create/', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const signup = (first_name, last_name, email, password, re_password, Phone, company) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password,\n    Phone,\n    company\n  });\n  console.log(body);\n\n  try {\n    const res = await axios.post('/auth/users/', body, config);\n    dispatch({\n      type: SIGNUP_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    dispatch({\n      type: ACTIVATION_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_FAIL\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const contactUs = (name, email, subject, message) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    subject,\n    message\n  });\n  console.log(\"we are here2\");\n\n  try {\n    await axios.post(`${process.env.REACT_APP_API_URL}/api/contactUs/`, body, config);\n    dispatch({\n      type: CONTACT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: CONTACT_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hp/PycharmProjects/ITINSPIREv2/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_FAIL","LOGOUT","CONTACT_SUCCESS","CONTACT_FAIL","load_user","dispatch","localStorage","getItem","config","headers","res","get","type","payload","data","err","googleAuthenticate","state","code","details","formBody","Object","keys","map","key","encodeURIComponent","join","post","process","env","REACT_APP_API_URL","facebookAuthenticate","checkAuthenticated","body","JSON","stringify","token","login","email","password","signup","first_name","last_name","re_password","Phone","company","console","log","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout","contactUs","name","subject","message"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    PASSWORD_RESET_SUCCESS,\n    PASSWORD_RESET_FAIL,\n    PASSWORD_RESET_CONFIRM_SUCCESS,\n    PASSWORD_RESET_CONFIRM_FAIL,\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    GOOGLE_AUTH_SUCCESS,\n    GOOGLE_AUTH_FAIL,\n    FACEBOOK_AUTH_SUCCESS,\n    FACEBOOK_AUTH_FAIL,\n    LOGOUT,\n    CONTACT_SUCCESS,\n    CONTACT_FAIL,\n} from './types';\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        }; \n\n        try {\n            const res = await axios.get('/auth/users/me/', config);\n    \n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const googleAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${formBody}`, config);\n\n            dispatch({\n                type: GOOGLE_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: GOOGLE_AUTH_FAIL\n            });\n        }\n    }\n};\n\nexport const facebookAuthenticate = (state, code) => async dispatch => {\n    if (state && code && !localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        };\n\n        const details = {\n            'state': state,\n            'code': code\n        };\n\n        const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n\n        try {\n            const res = await axios.post(`/auth/o/facebook/?${formBody}`, config);\n\n            dispatch({\n                type: FACEBOOK_AUTH_SUCCESS,\n                payload: res.data\n            });\n\n            dispatch(load_user());\n        } catch (err) {\n            dispatch({\n                type: FACEBOOK_AUTH_FAIL\n            });\n        }\n    }\n};\n\nexport const checkAuthenticated = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }; \n\n        const body = JSON.stringify({ token: localStorage.getItem('access') });\n\n        try {\n            const res = await axios.post('/auth/jwt/verify/', body, config)\n\n            if (res.data.code !== 'token_not_valid') {\n                dispatch({\n                    type: AUTHENTICATED_SUCCESS\n                });\n            } else {\n                dispatch({\n                    type: AUTHENTICATED_FAIL\n                });\n            }\n        } catch (err) {\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            });\n        }\n\n    } else {\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const res = await axios.post('/auth/jwt/create/', body, config);\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(load_user());\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n};\n\nexport const signup = (first_name, last_name, email, password, re_password,Phone,company) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ first_name, last_name, email, password, re_password ,Phone,company});\n    console.log(body)\n\n    try {\n        const res = await axios.post('/auth/users/', body, config);\n        dispatch({\n            type: SIGNUP_SUCCESS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        })\n    }\n};\n\nexport const verify = (uid, token) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n        dispatch({\n            type: ACTIVATION_SUCCESS,\n        });\n    } catch (err) {\n        dispatch({\n            type: ACTIVATION_FAIL\n        })\n    }\n};\n\nexport const reset_password = (email) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_FAIL\n        });\n    }\n};\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\n\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: PASSWORD_RESET_CONFIRM_FAIL\n        });\n    }\n};\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n};\nexport const contactUs = (name, email,subject,message) => async dispatch => {\n    const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n    const body = JSON.stringify({ name, email,subject,message });\n    console.log(\"we are here2\")\n    try {\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/contactUs/`, body, config);\n\n        dispatch({\n            type: CONTACT_SUCCESS\n        });\n    } catch (err) {\n        dispatch({\n            type: CONTACT_FAIL\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}